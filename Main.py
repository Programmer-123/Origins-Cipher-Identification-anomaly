encryptedRawText = '''BDMM@SFOSOATLPPBEU@SBCLCWLBMALTDFBEHR@QRAENCBM@BISAL@LLKUARKHRBSBHRAXNEIILARIBRIAEM@AEDXOTSTDCASBU@PFS@CBEHRBLJAUBLIBRQLBCTEUATHSBDC@RKEHRBRW@BCNABTTCSHCRBSRPLBCTEUATCKRM@VS@CBEHTCCJUTDR@M@IRPNDLA@BHRKUAHLKKLJRBEHRAEEISALAROHMBIVIR@GRBEHR@FOBWCRCAEM@ARTDHNDSSAOBTNDCIELIBEHR@TERG@ASYACBTGFKCAEM@AECJCARTCJCLPRBMALTDF@RUOFAEM@ARTDHNDSSAOAEM@BWCRCBM@JHEURQLBNEERRUOFARTDHNDSSAOAEM@BWCRCBEHR@FOBCUDTCRBEHR@QRBDM@CBEJ@LBEHRASRORD@ALORFARTDLS@FBRW@BCNAACIPVBLUBCTEUATCKRM@VS@C@PRATRNEBCFIL@FOBDRUBEHRBLOATLOKRCUTSTLI@QLADBFBWCRCAEM@ARTDHNDSSAOAEM@AEDXOMQDCBRQLBCTEUATS@QBCFILBEHRARTETDLAZRRKHRAEM@AECSELWF@RUOF./l78BLIALQTRQ@BEHRBLOAHLINTTDRAZRRKHRBNERBS@BKMARAOKGRBEHRAXNICIWOAEESRILAOKGRBEHRAEM@BCTDWDR@OQRASBUBDGAMACBEHRBRW@BCRQGR@ROFAXNES@JEDMLIAEELRWRBRIBDRUQHTGFILBNCMACRUBEHRAEEFDBCRAOKGRBNDD@LBEHRAS@BSRVIAEENM@MOAS@AEDCOMOZCBCCJWDCBEHRAHLKLRPLBRZELBEHTDHNCLMBFC@TEHRRUFAZM@BRUQHRKUAOKGRBEHRBRHCLARRWERQAARBEHRAEEGRKLIFADBFAZEHRBNEHUATDUJROMOZCAHLID@MOARRUQF@QWRBRZELBEHRBTNDPRAZEHRBCTEHU@NEEIBEHR@QRBIEDCBUONE@@PF@QRAEETRJLTDOBCTEUACINEIVBFAEM@BCILRPRAEM@AEEIRQUARKHRAOKGRBEHRBLOAHLKHTDLPRBDCKF@QRAEEUOLM@BE@@QRAEDEEELAZEHRACS@VFBEHRACLQRAEM@BCEMBSRJTCRBEHR@ROFAEEIRQUAZEHRBSBHRAEETRJMD@AMBERBEHR@CKTEHSAPMYRBE@BTGFJLBEFBEHRBSBHRAHLJTNDRAECELJWLOELUASBUBEFBRW@BS@Q@BEHRBLOAQECMR@QRAEETMBUBSRVI@QHUARTDHNDSSAOBCTEUAZEHRBSBHRACS@VFBEHRBCELJWLOC@QRAECITRBNDTMBFTCIL@LOTSAOA@AZ@AECTDUODRJCBCTEUAZEHRBCTEHUAOKGRBEHRAEDCS@Q@AEM@BCENCFA@BGFUOTHRBRUCAZEHRBTGFKLBS@AEEFD@OSPP@AEM@@NDALBS@AY@WOBEHRALORFATCTTDLOLKIBWCFA@AECNANDSS@ACINEIVBFBRWNIAEM@BCILRPR@FLORBNDTMBFTCILBRWNIBNDRS@L@FM@@FOAHLKSRJTLOCAD@WPRBEHRBICOLCALS@M@BM@AHLJRUBCCJWDCAHLJLKRA@AEDRJUOSPLIAMBERBEHR@PR@FFOBTNEUATDUJROMOZCBEHRBNEHUBCRQGR@QRBDROLCBE@@LLKSRACLUQUAOKGRBEHRAS@ARKHR@ROFBRRQGR@OQRBCTEUBLOKS@TDOOBDGBRQAARBIRPNDU@LUGSTCCCVRBEHRALORF@TDUOBRHCLATDRUFBDRU@QRATM@MO@M@KRKLI@CKSS@MO@FOASELUPOBNEETGFKCALORFBALQ@BEHRBRLIW@AZEHRBES@UDAWC@QRBWCRCAEM@ARTDHNDSSAOBEHR@ROFBDLKRBDVBCL@QRADBFBRIAOKGRBEHR@QRBDGAMAC@MBS@FBDRV@C@QRBGFUQNCBDFS@LBE@@QRADBFBLOJROMOZCBEHRBCLKHUBSBHRAEELJLTETDCBCTEUAMBERBEHR@LOTTLOC@QLBHRKUBWCRCBEHRAHLJVBCL@TESBUBEHR@FOBRUOAEERFILBE@ACLUQUBDG@TEESRASOKGRBEHRBSRRIFBUOSOBEHRAHLKKLJRAZ@BUOSOBEHRAZ@@LLWFBEHR@FOBLOKREDRBCS@WPRA@BRUOBUON@@QRASBUAECUDTCRBE@BRQLACLUOCAXRTCFBEHRBSBHRBCRVTNC@QRAYBUBDUKRECFHCBSRPLBEHRBSBHRANEHRAECELJWLOCATTNDLITDOZC@PFS@CBEHRAHLITDUOECRALORFARKYBLBEHRBTNDWCSO@QRBDOQFARRWERQAARBEHRBNLKRBEJ@L@FOBRSAOBSTDQEDCBEHRBLIAXRTCFBEHRAHLKKLJRAZARTDHNDSSAO@FO@TEALWLBEHRAHLICVECRAYAELVR@QRBTNDMOKGRBEHRAEDUPLAY@NDCBEHRAYRW@AXTDUAXLM@CJPZRBCTEUATCIRTCFBEHRBNEHUAYACRWSARBEHRBLOAOKGR@QRAEDOQFADBFASRBEHRAXLM@KRKLIATKMBRBDG@RQSRBEHRALORFBDCIXOSDZFALUJSSBRPOBEHR@FOBTM@EDCBEHRAEDY@NDCBNDRNCKL@LNDKIATCKRM@VS@CBM@ILJUICBEXJLKLJL@QR@TDCROBLIAEM@BESACAHLJPOKGRBEHRBELJLTETDC@QRBCNA@BCTEUBTM@MOBEHRBLIATTNDG@ASRQ@@OSDZF@GRBEHR@FO@LLWFBEHRBELJL@QRADBESTLIBNEJBRASBUBLOJRIEDCA@PFS@CBEHRBDGAMAC@QRBGFUQNCBDUKSOUSRJCBDFSBFCA@BTM@MO@QRBRLUCIFFJCBE@ACLUQUBRIBDS@CAZM@BLIAEM@BCN@JSBCFBRQLASBUBELILAYBULJ@RBEHR@FOBDGBRQAARARLOTSAOACS@VFAEDSBCRELIAEM@ATLJ@TRBEHRBLO@NDV@TR@QRAEEUOLM@@TDHLOL@QLATM@ILJUIC@M@COLBHRKUASCJ@RAHLKALQ@BEHRAHLKUOLLOFAOUAEDPQESRBNEE@ADBF@PFS@CBEHRAXRS@CACLUQUBSBHRBELIL@LJ@RBEHRBLOAZRIRUEDRBSBHRAEEUQGRBCEM@LLKDURVR@M@KRKLJECSAQCSOBE@@QRBLOKS@TDOOTETLUOCA@AEEUOLM@@NETLI@RKEHRBTM@MOBEHRBS@AHLKIRQUATM@JHEURQL@MAXOLBHRKUBRDBTLOCBLIAEELJANCR@QHUAMBERBUOLMBVRBEHR@FOARTEANDLAZ@BM@MOBEHR@QRAEERTCM@ASBUASRQ@AEM@AXS@UTBCGCJL@ROFAEENM@MOASBUAEERD@TRZCBE@@QRASBU@TESBUAYVBEFBEHRBFCKHUALORFBDCIXOSDZFALUJSSBRPO@FOATICQSRAHLKLJANCRBEHRBDUPL@QRBLOKS@TDOOBEHSTCKRILID@F@MBTNDLITDOZC@RKEHR@QR@TDROLCBE@@PRM@ACLUQUBRIBCTEHUAZMALTDFBLIAECRQSR@TCGARBE@ACLUQU@RQS@TDCPLBEHRBSBHRAECLURAEM@AEDLROHLIBCTEUBNESRJNEFCM@BCJCBCGAR@TDHLOL@QLASBUAXRQRD@FBEHRBSBHRARM@ICIFFO@KYBLBEHR@QR@SBCLCBDM@EE@BRIBTM@MOBEHRBS@AZRIDAP@CBLOKRCVCOSO@TESBUAYVBEFBEHR@QRBDGAMACBFCVLBDRV@C@QRAECLJ@F@TEANDUQLBLIACJ@RAHLKALQ@@GAARUBEHRBCLKHU
'''
adfgvx = ["a","d","f","g","v","x"]
adfgv = ["a","d","f","g","v"]
import replit
replit.clear()
print("Analysis Complete")
encryptedText = ""
import re
encryptedText = (re.sub('[^A-Za-z0-9]+', '', encryptedRawText)).lower()
encryptedText = encryptedText.replace('\n', '').replace('\r', '')
print("Number of unique characters: " + str(len(set(encryptedText))))
if len(set(encryptedText)) == 2:
  cipher = "Baconian"
elif len(set(encryptedText)) in (5,6):
  cipher = "Polybius Square, Playfair, Foursquare, Bifid"
  if len(encryptedText) % 2 != 0:
    cipher = "Polybius Square, Bifid"
  if set(set(encryptedText)) == set(adfgv):
    cipher = "ADFGV"
  if set(set(encryptedText)) == set(adfgvx):
    cipher = "ADFGVX"
elif len(set(encryptedText)) > 26:
  cipher = "Code/Nomenclature or Homophonic Substitution Cipher"
elif len(set(encryptedText)) in (23,24,25,26):
  monogram = input("Is monogram analysis equivalent to English? (y/n): ")
  if monogram == "y":
    cipher = "Transposition Cipher (Columnar, etc. )"
  else:
    IC = input("Enter IC frequency analysis result: ")
    if float(IC) < 0.07 and float(IC) > 0.05:
      cipher = "Substitution Cipher (Caesar, Affine, etc. )"
    else:
      cipher = "Polyalphabetic, Polygraphic, Vigenere, Porta, Beaufort, Hill, or Gronsfeld (a.k.a You're dead.)"
print("Possible Ciphers: " + cipher)
